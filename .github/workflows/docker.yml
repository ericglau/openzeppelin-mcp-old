# This workflow runs whenever a release is created.
# The image is tagged with latest and the release version.
name: Build and Push Docker Images

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write
    env:
      REGISTRY: ${{ vars.DOCKER_REGISTRY }}
      ROLE_FOR_OIDC: "${{ secrets.ROLE_FOR_OIDC }}"
      ROLE_TO_ASSUME: "${{ secrets.ROLE_TO_ASSUME }}"
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
      
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          platforms: 'arm64,amd64'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2

      - name: Set up AWS credentials via OIDC and role chaining
        uses: ./.github/actions/oidc
        with:
          role-for-oidc: ${{ env.ROLE_FOR_OIDC }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        id: push
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            GA4_API_SECRET=${{ secrets.GA4_API_SECRET }}
            NEXT_PUBLIC_GA4_MEASUREMENT_ID=${{ secrets.NEXT_PUBLIC_GA4_MEASUREMENT_ID }}
          tags: |
            ${{ env.REGISTRY }}/openzeppelin-mcp:latest
            ${{ env.REGISTRY }}/openzeppelin-mcp:${{ github.event.release.tag_name }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      ROLE_FOR_OIDC: "${{ secrets.ROLE_FOR_OIDC }}"
      ROLE_TO_ASSUME: "${{ secrets.ROLE_TO_ASSUME }}"
      ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
      ECS_SERVICE: ${{ vars.ECS_SERVICE }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up AWS credentials via OIDC and role chaining
        uses: ./.github/actions/oidc
        with:
          role-for-oidc: ${{ env.ROLE_FOR_OIDC }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
      
      - name: AWS ECS force new deployment
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment --region $AWS_REGION
